from .UIManagers import *from pygame.locals import *class EventManager:    '''    Event manager will execute tasks upon criteria being met.    For example:        eventManager.bind(pygame.locals.MOUSEMOTION,foo,['bar'])    Will execute foo(event,'bar') when the mouse is moved with    event being the mouse event object.    '''    def __init__(self,pygame):        '''        Initialise event manager with the current instance of pygame        '''        self.pygame=pygame        self.groupedEvents={}        self.allEvents={}        self.perminent=[]        self.maxEventId=0        self.buttonManager = ButtonManager()        self.uiManagers = [self.buttonManager]        for manager in self.uiManagers:            self.bind(MOUSEBUTTONUP, manager.mouseUpEvent)            self.bind(MOUSEBUTTONDOWN, manager.mouseDownEvent)            self.bind(MOUSEMOTION, manager.mouseMotionEvent)            self.bind(KEYDOWN, manager.keyDownEvent)            self.bind(KEYUP, manager.keyUpEvent)    def bind(self,eventType,function,arguments=[]):        '''        Bind an event to a function        '''        if eventType not in self.groupedEvents:            self.groupedEvents[eventType]=[]        self.groupedEvents[eventType].append([function,arguments])    def ignore(self,function):        '''        Unbind an event from a function        '''        for key in self.groupedEvents:            for item in self.groupedEvents[key]:                if function==item[0]:                    del self.groupedEvents[key]                    return    def bindAll(self,function,arguments=[]):        '''        Bind all events to a function, will        call the funtion if any event occurs        '''        self.allEvents[function]=arguments    def ignoreAll(self,function):        '''        Stop a function being called every event        '''        del self.allEvents[function]    def doBinds(self,event):        '''        Checks event and performs functions        bound to those events        '''        calledFunctions=[]        for function in self.allEvents:            args=[event]+self.allEvents[function]            function(*args,**kwds)            calledFunctions.append(function)                    if event.type in self.groupedEvents:            for eventFunction in self.groupedEvents[event.type]:                if eventFunction[0] not in calledFunctions:                    args=[event]+eventFunction[1]                    eventFunction[0](*args)    def tick(self):        '''        Executed by DisplayDriver to check events        every frame        '''        for event in self.pygame.event.get():            self.doBinds(event)